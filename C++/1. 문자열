https://blog.naver.com/greattang/223862157967

1. 입출력
1-1. 문자
문자형 변수는 데이터 크기가 1byte인 char를 통해서 선언할 수 있다.
char c;
이러한 방식으로 변수를 선언해 준다면 c는 한 개의 문자를 저장할 수 있다.


1-2. 문자열
문자열을 저장하는 데이터 타입을 선언하는 방식은 두 가지가 있다. 첫 번째는 char를 배열 형태로 선언해주는 것이고, 두 번째는 문자열을 뜻하는 string 타입을 사용하는 것이다.
char s1[100];
string s2;
이렇게 선언된 변수 s1, s2는 여러 개의 문자, 즉 문자열을 저장할 수 있다. string을 사용하려면 앞에 std::을 붙이거나 using namespace std를 사용해야 한다.


1-3. 입력
scanf나 cin을 통해 입력받을 수 있다.
scanf의 경우문자 하나를 입력받고 싶은 경우에는 %c를, 문자열을 입력받고 싶은 경우에는 %s를 사용한다.
char s1;
char s2[100];

scanf("%c", &s1);
scanf("%s", s2);
일반 문자형 변수일 경우 scanf를 사용할 때 &를 붙여 줘야 하지만, 배열 형태일 경우 배열이 주소 역할을 하므로 &를 붙여줄 필요가 없다.
char s1[100];

scanf("%[^\n]s", s1);
%s를 이용한다면 공백을 포함한 문자열을 입력받을 수 없다. 이때는 %s가 아닌 %[^\n]s을 사용해 주면 공백을 포함한 문자열을 입력받을 수 있다.
getchar();
scanf를 연속으로 사용하면서 여러 개의 문자열을 입력받을 때, 문자열의 입력이 무시되는 경우가 있다. 이런 경우는 우리가 입력을 끝낼 때 누르는 엔터 키, 즉 개행 문자 '\n'을 다음 scanf의 문자로 입력받을 때 발생한다. 그래서 getchar()를 사용하여 입력 버퍼를 제거해 줄 필요가 있다.


1-4. 출력
printf나 cout을 통해 출력할 수 있다.
printf의 경우 문자 하나를 출력할 경우에는 %c를, 문자열을 출력할 경우에는 %s를 사용한다.
char s1;
char s2[100];

cin >> s1;
cin >> s2;

printf("%c", s1);
printf("%s", s2);

2. <string>
문자열을 다뤄야 할 때는 python을 사용하는 것이 가장 쉽고 직관적이라고 생각한다. 그럼에도 불구하고 C++을 이용하여 문자열을 다뤄야 한다면, <string> 라이브러리에 포함된 함수들을 사용해 볼 수 있다.

2-1. 기본 조작
문자열의 크기는 size() 또는 length()를 통해 확인할 수 있다.
string s = "Hello";
cout << s.length(); // 5
cout << s.size(); // 5

문자열이 비었는 지는 empty()를 통해 bool 형태로 확인할 수 있다. 그리고 문자열을 비우고 싶다면 ""로 재선언해도 되지만, clear()를 사용할 수도 있다.
string s = "Hello"
cout << s.empty(); // 0(False)
s.clear();
cout << s.empty(); // 1(True)

문자열의 크기를 안다면 배열 형태로 인덱스를 참조할 수 있지만, 그렇지 않은 경우에는 front()와 back()을 사용할 수 있다.
string s = "Hello";
cout << s.front() << " " << s.back(); // H o

2-2. 입출력
cin을 사용하면 문자열을 공백 단위로 하나씩, 즉 단어 단위로 입력받을 수 있다. 만약 공백을 포함한 문자열을 입력받고 싶다면 getline()을 사용할 수 있다.
string s;
cin >> s; // 공백이 포함되지 않은 문자열
cout << s;

string sentence;
getline(cin, sentence); // 공백이 포함된 문자열
cout << sentence;

2-3. 검색
find()는 0-indexed 기준으로 지정한 문자의 위치를 왼쪽, 즉 0번부터 탐색해서 처음 발견한 위치를 반환한다.
string s = "abcdedcba";
cout << s.find('a'); // 0
cout << s.find('e'); // 4

rfind()는 오른쪽부터 탐색해서 처음 발견한 위치를 반환한다.
string s = "abcdedcba";
cout << s.rfind('a'); // 8
cout << s.rfind('e'); // 4

이는 동일한 문자들의 집합에서 첫 등장과 마지막 등장을 찾을 수 있는 함수인 find_first_of()과 find_last_of()로도 확인할 수 있다.
string s = "aaaaaa";
cout << s.find_first_of('a'); // 0
cout << s.find_last_of('a'); // 5

2-4. 부분 문자열
부분 문자열을 확인하려면 substr(위치, 길이)로 확인할 수 있다. 이때 위치는 0-indexed를 기준으로 한다.
string s = "I am groot";
cout << s.substr(5, 5); // groot

string s = "I am groot";
cout << s.substr(s.find('g'), 5); // groot

특정 문자열을 한 문자열 뒤에 이어붙이려면 + 연산을 사용해도 좋지만, append() 함수를 사용할 수 있다.
맨 뒤가 아닌 특정한 위치에 삽입하려면 insert(위치, 문자열) 을 사용할 수 있다.
string s = "I am ";
s.append("groot");
cout << s; // I am groot

s.insert(0, "Hello ");
cout << s; // Hello I am groot

특정한 부분을 삭제하려면 erase(위치, 길이)를 사용할 수 있다.
string s = "I am groot";
s.erase(5, 5);
cout << s; // I am

특정한 부분을 다른 문자열로 바꾸려면 replace(위치, 길이, 문자열)을 사용할 수 있다.
string s = "I am groot";
s.replace(5, 5, "Iron Man");
cout << s; // I am Iron Man

2-5. 문자열 조작
문자형 변수를 대문자로 변환하거나 소문자로 변환하려면 toupper()나 tolower()를 사용할 수 있다. 이때 문자를 영구히 변환하는 것이 아니라 변환한 값을 정수형으로 반환하는 것이므로 반환된 값을 다시 변수에 저장해 줄 필요가 있다.
char a = 'h';
a = toupper(a);
cout << a; // H

2-6. 변환
문자열을 정수로 변환하려면 타입별로 stoi(), stol(), stoull()을 사용하면 된다. 이때 앞자리의 불필요한 0은 사라진다.
string s = "000123";
int num = stoi(s);
cout << num; // 123

문자열을 실수로 변환할 수도 있다. 이때는 stod()를 사용하면 된다.
string s = "3.1415";
double num = stod(s);
cout << num; // 3.1415

반대로 숫자를 문자열로 바꿀 수도 있다. 이때는 to_string()을 사용하면 된다.
int num = 214748;
string s = to_string(num);
cout << s; // 214748
